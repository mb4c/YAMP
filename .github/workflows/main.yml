# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build binaries

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang-15]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang-15
            cpp_compiler: clang++-15

    steps:
    - uses: actions/checkout@v4

    - uses: rui314/setup-mold@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - uses: lukka/get-cmake@latest

    - name: Setup GStreamer
      id:   setup_gstreamer
      uses: blinemedical/setup-gstreamer@1.0
      with:
        version: '1.24.7'
        arch: 'x86'
    - run: |
        echo $env:GSTREAMER_1_0_ROOT_MSVC_X86

    
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: >
        sudo apt install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

    - name: Install newer Clang
      if: matrix.os == 'ubuntu-latest' && matrix.cpp_compiler == 'clang++-15'
      run: |
       # wget https://apt.llvm.org/llvm.sh
       # chmod +x ./llvm.sh
       # sudo ./llvm.sh 17
       sudo apt install clang-15
       echo "CXX=clang++-15" >> $GITHUB_ENV
       echo "CC=clang-15" >> $GITHUB_ENV
       
    - uses: friendlyanon/setup-vcpkg@v1
      with: { committish: 4bd5a2954e97569153f01da850bccf46093a5cef }
    
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}
        -DVCPKG_TARGET_TRIPLET=x64-linux-release
    
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
      
    - uses: actions/upload-artifact@v4
      with:
        path: |
          ${{ steps.strings.outputs.build-output-dir }}
          !${{ steps.strings.outputs.build-output-dir }}/vcpkg_installed
          !${{ steps.strings.outputs.build-output-dir }}/CMakeFiles
        name: yamp_${{ matrix.os }}_${{ matrix.c_compiler }}
        compression-level: 9
